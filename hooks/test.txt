// Le reste du code demeure inchangé...
export const I18nContext = createContext();

export const I18nProvider = ({ children }) => {
  const [locale, setLocale] = useState('fr');

  // Charger la langue au démarrage
  useEffect(() => {
    const loadLanguage = async () => {
      try {
        const savedLocale = await AsyncStorage.getItem('locale');
        if (savedLocale) {
          setLocale(savedLocale);
        }
      } catch (error) {
        console.error('Error loading language preference:', error);
      }
    };
    
    loadLanguage();
  }, []);

  // Changer de langue
  const changeLocale = async (newLocale) => {
    try {
      await AsyncStorage.setItem('locale', newLocale);
      setLocale(newLocale);
    } catch (error) {
      console.error('Error saving language preference:', error);
    }
  };

  // Fonction de traduction
  const t = (key) => {
    return translations[locale][key] || key;
  };

  return (
    <I18nContext.Provider value={{ locale, changeLocale, t }}>
      {children}
    </I18nContext.Provider>
  );
};

// Hook personnalisé pour l'internationalisation
export const useTranslation = () => {
  const context = useContext(I18nContext);
  if (!context) {
    throw new Error('useTranslation must be used within an I18nProvider');
  }
  return context;
};

